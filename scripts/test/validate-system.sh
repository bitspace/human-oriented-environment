#!/usr/bin/env bash
# System Validation Script for NixOS + Hyprland
# Tests all components of the LLM-orchestrated workstation
# Author: Generated by Claude Code synthesis
# Date: 2025-08-12

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test results tracking
TESTS_RUN=0
TESTS_PASSED=0
TESTS_FAILED=0
FAILED_TESTS=()

# Logging functions
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Test result tracking
pass_test() {
    ((TESTS_PASSED++))
    success "$1"
}

fail_test() {
    ((TESTS_FAILED++))
    FAILED_TESTS+=("$1")
    error "$1"
}

run_test() {
    ((TESTS_RUN++))
    local test_name="$1"
    local test_command="$2"
    
    log "Running test: $test_name"
    
    if eval "$test_command" &>/dev/null; then
        pass_test "$test_name"
        return 0
    else
        fail_test "$test_name"
        return 1
    fi
}

# System information tests
test_system_info() {
    log "=== Testing System Information ==="
    
    run_test "NixOS Detection" "test -f /etc/NIXOS"
    run_test "Kernel Version" "uname -r | grep -q '^[0-9]'"
    run_test "NixOS Version" "nixos-version"
    run_test "System Architecture" "test '$(uname -m)' = 'x86_64'"
    
    # Hardware-specific tests for ThinkPad P16 Gen 2
    run_test "Intel CPU Detection" "cat /proc/cpuinfo | grep -q 'model name.*Intel'"
    run_test "Memory Detection (>100GB)" "test $(free -g | awk '/^Mem:/{print $2}') -gt 100"
    run_test "NVMe Storage Detection" "lsblk | grep -q nvme"
    
    # Check for expected CPU model (if available)
    if cat /proc/cpuinfo | grep -q "i9-13980HX"; then
        pass_test "Expected CPU Model (i9-13980HX)"
    else
        warn "CPU model differs from expected i9-13980HX"
    fi
}

# Boot system tests
test_boot_system() {
    log "=== Testing Boot System ==="
    
    run_test "SystemD Boot Loader" "test -d /boot/loader"
    run_test "EFI System" "test -d /sys/firmware/efi"
    run_test "SystemD Running" "systemctl is-system-running --quiet || systemctl is-system-running | grep -E 'running|degraded'"
    run_test "Boot Generation Available" "ls /nix/var/nix/profiles/system-* | wc -l | grep -q '[1-9]'"
}

# Package management tests
test_package_management() {
    log "=== Testing Package Management ==="
    
    run_test "Nix Command Available" "which nix"
    run_test "Nixos-rebuild Available" "which nixos-rebuild"
    run_test "Flakes Enabled" "nix --version | grep -q flakes || nix show-config | grep -q 'experimental-features.*flakes'"
    run_test "Nix Store Accessible" "test -d /nix/store"
    run_test "Configuration Files Present" "test -f /etc/nixos/configuration.nix"
}

# Desktop environment tests
test_desktop_environment() {
    log "=== Testing Desktop Environment ==="
    
    # Wayland and Hyprland tests
    run_test "Wayland Support" "test -n '$WAYLAND_DISPLAY' || ls /run/user/*/wayland-*"
    run_test "Hyprland Binary" "which Hyprland"
    run_test "Hyprland Running" "pgrep -x Hyprland"
    
    # Display and graphics tests
    run_test "Graphics Driver Loaded" "lsmod | grep -E 'i915|intel'"
    run_test "Mesa Drivers Available" "ls /nix/store/*mesa* | head -1"
    run_test "Display Resolution" "hyprctl monitors | grep -q '[0-9]\+x[0-9]\+'"
    
    # Essential desktop components
    run_test "Terminal Emulator" "which alacritty"
    run_test "Application Launcher" "which wofi"
    run_test "File Manager" "which nautilus"
    run_test "Web Browser" "which firefox"
}

# Audio system tests
test_audio_system() {
    log "=== Testing Audio System ==="
    
    run_test "PipeWire Service" "systemctl --user is-active pipewire"
    run_test "PipeWire Pulse" "systemctl --user is-active pipewire-pulse"
    run_test "Audio Devices Available" "pactl list short sinks | wc -l | grep -q '[1-9]'"
    run_test "Audio Control Available" "which pavucontrol"
    
    # Professional audio support
    if systemctl --user is-active pipewire-jack &>/dev/null; then
        pass_test "JACK Support (PipeWire)"
    else
        warn "JACK support not active (may be intentional)"
    fi
}

# Network tests
test_networking() {
    log "=== Testing Networking ==="
    
    run_test "NetworkManager Service" "systemctl is-active NetworkManager"
    run_test "Internet Connectivity" "ping -c 1 1.1.1.1"
    run_test "DNS Resolution" "nslookup nixos.org"
    run_test "Network Interfaces" "ip link show | grep -E 'wl|en' | grep -q UP"
    
    # Bluetooth support
    if systemctl is-active bluetooth &>/dev/null; then
        pass_test "Bluetooth Service"
    else
        warn "Bluetooth service not active"
    fi
}

# Development environment tests
test_development_environment() {
    log "=== Testing Development Environment ==="
    
    # Version control
    run_test "Git Available" "which git"
    run_test "Git LFS Available" "which git-lfs"
    
    # Text editors
    run_test "Neovim Available" "which nvim"
    
    # Container technologies
    if which docker &>/dev/null; then
        run_test "Docker Available" "which docker"
        if systemctl is-active docker &>/dev/null; then
            pass_test "Docker Service Active"
        else
            warn "Docker service not active"
        fi
    fi
    
    # Build tools
    run_test "Make Available" "which make"
    run_test "GCC Available" "which gcc"
    
    # Package managers for different languages
    if which python3 &>/dev/null; then
        pass_test "Python 3 Available"
    fi
    
    if which node &>/dev/null; then
        pass_test "Node.js Available"
    fi
    
    if which rustc &>/dev/null; then
        pass_test "Rust Available"
    fi
}

# LLM integration tests  
test_llm_integration() {
    log "=== Testing LLM Integration ==="
    
    # Configuration structure
    run_test "NixOS Config Structure" "test -d /etc/nixos/modules"
    
    # Home Manager
    if test -d "$HOME/.config/home-manager"; then
        pass_test "Home Manager Config Present"
        run_test "Home Manager Binary" "which home-manager"
    else
        warn "Home Manager not configured"
    fi
    
    # LLM helper scripts
    local script_dir="$(dirname "$0")/../llm-integration"
    if test -f "$script_dir/llm-config-manager.py"; then
        pass_test "LLM Config Manager Available"
    else
        warn "LLM Config Manager script not found"
    fi
    
    if test -f "$script_dir/claude-nixos-helper.py"; then
        pass_test "Claude NixOS Helper Available"  
    else
        warn "Claude NixOS Helper script not found"
    fi
    
    # Configuration parseability test
    if python3 -c "import yaml, json" &>/dev/null; then
        pass_test "YAML/JSON Support Available"
    else
        warn "YAML/JSON parsing libraries not available"
    fi
}

# Gaming and multimedia tests
test_gaming_multimedia() {
    log "=== Testing Gaming and Multimedia ==="
    
    # Steam support
    if which steam &>/dev/null; then
        pass_test "Steam Available"
    else
        warn "Steam not installed"
    fi
    
    # Wine/Proton support
    if which wine &>/dev/null; then
        pass_test "Wine Available"
    else
        warn "Wine not installed"
    fi
    
    # Multimedia codecs and players
    run_test "Media Player Available" "which mpv"
    
    # Image viewers
    if which imv &>/dev/null; then
        pass_test "Image Viewer Available"
    else
        warn "Image viewer not available"
    fi
    
    # Gaming optimizations
    if which gamemode &>/dev/null; then
        pass_test "GameMode Available"
    else
        warn "GameMode not available"
    fi
}

# Security and permissions tests
test_security() {
    log "=== Testing Security ==="
    
    run_test "User in Wheel Group" "groups | grep -q wheel"
    run_test "Sudo Access" "sudo -n true 2>/dev/null || test $? -eq 1"  # Should ask for password or work
    run_test "Firewall Status" "systemctl is-active firewalld || systemctl is-active iptables || iptables -L"
    
    # File permissions
    run_test "Config Files Readable" "test -r /etc/nixos/configuration.nix"
    run_test "Home Directory Permissions" "test -O $HOME && test -w $HOME"
    
    # SSH service (if enabled)
    if systemctl is-enabled sshd &>/dev/null; then
        if systemctl is-active sshd &>/dev/null; then
            pass_test "SSH Service Active"
        else
            warn "SSH service enabled but not active"
        fi
    fi
}

# Performance and optimization tests
test_performance() {
    log "=== Testing Performance Optimizations ==="
    
    # CPU governor
    local governor=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor 2>/dev/null || echo "unknown")
    if [[ "$governor" == "performance" ]]; then
        pass_test "Performance CPU Governor"
    elif [[ "$governor" == "powersave" ]]; then
        warn "CPU Governor set to powersave (may be intentional)"
    else
        warn "CPU Governor: $governor"
    fi
    
    # Memory optimization
    local swappiness=$(cat /proc/sys/vm/swappiness)
    if [[ $swappiness -le 20 ]]; then
        pass_test "Low Swappiness Value ($swappiness)"
    else
        warn "High swappiness value: $swappiness"
    fi
    
    # SSD optimization
    if systemctl is-active fstrim.timer &>/dev/null; then
        pass_test "SSD TRIM Timer Active"
    else
        warn "SSD TRIM timer not active"
    fi
    
    # Thermal management
    if systemctl is-active thermald &>/dev/null; then
        pass_test "Thermal Daemon Active"
    else
        warn "Thermal daemon not active"
    fi
}

# Configuration validation tests
test_configuration_validation() {
    log "=== Testing Configuration Validation ==="
    
    # Test NixOS configuration syntax
    if timeout 60 nixos-rebuild dry-build &>/dev/null; then
        pass_test "NixOS Configuration Valid"
    else
        fail_test "NixOS Configuration Invalid"
    fi
    
    # Test Home Manager configuration (if available)
    if which home-manager &>/dev/null && test -d "$HOME/.config/home-manager"; then
        if timeout 60 home-manager build &>/dev/null; then
            pass_test "Home Manager Configuration Valid"
        else
            fail_test "Home Manager Configuration Invalid"
        fi
    fi
    
    # Test essential services configuration
    local essential_services=(
        "NetworkManager"
        "systemd-resolved"
    )
    
    for service in "${essential_services[@]}"; do
        if systemctl is-enabled "$service" &>/dev/null; then
            if systemctl is-active "$service" &>/dev/null; then
                pass_test "Essential Service Active: $service"
            else
                warn "Essential service enabled but not active: $service"
            fi
        fi
    done
}

# Main test execution
run_all_tests() {
    log "Starting comprehensive system validation..."
    log "Target: NixOS + Hyprland LLM-Orchestrated Workstation"
    echo
    
    test_system_info
    echo
    test_boot_system
    echo
    test_package_management
    echo
    test_desktop_environment
    echo
    test_audio_system
    echo
    test_networking
    echo
    test_development_environment
    echo
    test_llm_integration
    echo
    test_gaming_multimedia
    echo
    test_security
    echo
    test_performance
    echo
    test_configuration_validation
    echo
}

# Generate test report
generate_report() {
    log "=== Test Results Summary ==="
    echo
    echo -e "${BLUE}Tests Run:${NC} $TESTS_RUN"
    echo -e "${GREEN}Tests Passed:${NC} $TESTS_PASSED"
    echo -e "${RED}Tests Failed:${NC} $TESTS_FAILED"
    echo
    
    if [[ $TESTS_FAILED -gt 0 ]]; then
        echo -e "${RED}Failed Tests:${NC}"
        for test in "${FAILED_TESTS[@]}"; do
            echo -e "  ${RED}✗${NC} $test"
        done
        echo
    fi
    
    local success_rate=$(( (TESTS_PASSED * 100) / TESTS_RUN ))
    echo -e "${BLUE}Success Rate:${NC} ${success_rate}%"
    
    if [[ $success_rate -ge 90 ]]; then
        success "System validation PASSED (${success_rate}%)"
        return 0
    elif [[ $success_rate -ge 75 ]]; then
        warn "System validation MARGINAL (${success_rate}%)"
        return 1  
    else
        error "System validation FAILED (${success_rate}%)"
        return 2
    fi
}

# Help function
show_help() {
    echo "NixOS + Hyprland System Validation Script"
    echo
    echo "Usage: $0 [OPTIONS]"
    echo
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  -q, --quiet    Reduce output verbosity"
    echo "  -v, --verbose  Increase output verbosity"
    echo "  --json         Output results in JSON format"
    echo
    echo "This script validates all components of the LLM-orchestrated"
    echo "NixOS + Hyprland workstation setup."
}

# Parse command line arguments
QUIET=false
VERBOSE=false
JSON_OUTPUT=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -q|--quiet)
            QUIET=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        --json)
            JSON_OUTPUT=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Adjust output based on flags
if [[ "$QUIET" == "true" ]]; then
    exec 2>/dev/null
fi

# Main execution
main() {
    if [[ "$JSON_OUTPUT" == "true" ]]; then
        # JSON output mode
        run_all_tests &>/dev/null
        
        local result_status="passed"
        local success_rate=$(( (TESTS_PASSED * 100) / TESTS_RUN ))
        
        if [[ $success_rate -lt 90 ]]; then
            result_status="failed"
        fi
        
        echo "{"
        echo "  \"timestamp\": \"$(date -Iseconds)\","
        echo "  \"tests_run\": $TESTS_RUN,"
        echo "  \"tests_passed\": $TESTS_PASSED,"
        echo "  \"tests_failed\": $TESTS_FAILED,"
        echo "  \"success_rate\": $success_rate,"
        echo "  \"status\": \"$result_status\","
        echo "  \"failed_tests\": ["
        
        if [[ ${#FAILED_TESTS[@]} -gt 0 ]]; then
            for i in "${!FAILED_TESTS[@]}"; do
                echo -n "    \"${FAILED_TESTS[$i]}\""
                if [[ $i -lt $((${#FAILED_TESTS[@]} - 1)) ]]; then
                    echo ","
                else
                    echo
                fi
            done
        fi
        
        echo "  ]"
        echo "}"
    else
        # Normal output mode
        run_all_tests
        generate_report
    fi
}

main "$@"