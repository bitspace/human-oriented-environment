#!/usr/bin/env bash
# Home Manager Setup Script for LLM-Orchestrated NixOS
# Configures user-level Hyprland environment and development tools
# Author: Generated by Claude Code synthesis  
# Date: 2025-08-12

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
USERNAME="${USERNAME:-$(whoami)}"
CONFIG_DIR="$HOME/.config/home-manager"
BACKUP_DIR="$HOME/.config/nixos-backup-$(date +%Y%m%d_%H%M%S)"

# Logging functions
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
    exit 1
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Check if running on NixOS
check_environment() {
    log "Checking environment..."
    
    if [[ ! -f /etc/NIXOS ]]; then
        error "This script must be run on NixOS"
    fi
    
    if [[ $EUID -eq 0 ]]; then
        error "This script should NOT be run as root"
    fi
    
    success "Environment check passed"
}

# Backup existing configurations
backup_existing_configs() {
    log "Backing up existing configurations..."
    
    mkdir -p "$BACKUP_DIR"
    
    # Backup common config directories
    local dirs_to_backup=(
        ".config/hypr"
        ".config/waybar" 
        ".config/alacritty"
        ".config/wofi"
        ".config/mako"
        ".config/zsh"
        ".zshrc"
        ".vimrc"
        ".gitconfig"
    )
    
    for dir in "${dirs_to_backup[@]}"; do
        if [[ -e "$HOME/$dir" ]]; then
            log "Backing up $dir"
            cp -r "$HOME/$dir" "$BACKUP_DIR/" 2>/dev/null || true
        fi
    done
    
    success "Backup completed at $BACKUP_DIR"
}

# Install Home Manager
install_home_manager() {
    log "Installing Home Manager..."
    
    # Add home-manager channel for current user
    nix-channel --add https://github.com/nix-community/home-manager/archive/release-24.11.tar.gz home-manager
    nix-channel --update
    
    # Install home-manager
    nix-shell '<home-manager>' -A install
    
    success "Home Manager installed"
}

# Create directory structure
create_directory_structure() {
    log "Creating configuration directory structure..."
    
    mkdir -p "$CONFIG_DIR"/{modules,profiles,themes}
    mkdir -p "$HOME"/{Pictures/Screenshots,Pictures/Wallpapers}
    mkdir -p "$HOME"/.local/{bin,share}
    mkdir -p "$HOME"/Projects/{personal,work,experiments}
    mkdir -p "$HOME"/Documents/{notes,docs,papers}
    
    success "Directory structure created"
}

# Generate Home Manager configuration
generate_home_config() {
    log "Generating Home Manager configuration..."
    
    cat > "$CONFIG_DIR/home.nix" << 'EOF'
# Home Manager Configuration for LLM-Orchestrated Workstation
# User: Generated dynamically
# Target: Hyprland + Development Environment

{ config, pkgs, ... }:

{
  imports = [
    ./modules/hyprland.nix
    ./modules/shell.nix  
    ./modules/development.nix
    ./modules/applications.nix
    ./modules/theme.nix
  ];

  # Home Manager metadata
  home = {
    username = "REPLACE_USERNAME";  # Will be replaced by script
    homeDirectory = "/home/REPLACE_USERNAME";
    stateVersion = "24.11";
  };

  # Enable home-manager
  programs.home-manager.enable = true;

  # Basic user packages
  home.packages = with pkgs; [
    # System utilities
    htop
    tree
    fd
    ripgrep
    bat
    exa
    
    # Development basics
    git
    neovim
    
    # Network tools  
    wget
    curl
    
    # Archive tools
    unzip
    zip
  ];

  # XDG directories
  xdg = {
    enable = true;
    userDirs = {
      enable = true;
      createDirectories = true;
      desktop = "$HOME/Desktop";
      documents = "$HOME/Documents";
      download = "$HOME/Downloads";
      music = "$HOME/Music";
      pictures = "$HOME/Pictures";
      videos = "$HOME/Videos";
      templates = "$HOME/Templates";
      publicShare = "$HOME/Public";
    };
  };

  # Session variables
  home.sessionVariables = {
    EDITOR = "nvim";
    BROWSER = "firefox";
    TERMINAL = "alacritty";
    
    # Wayland support
    NIXOS_OZONE_WL = "1";
    MOZ_ENABLE_WAYLAND = "1";
    QT_QPA_PLATFORM = "wayland";
    SDL_VIDEODRIVER = "wayland";
    _JAVA_AWT_WM_NONREPARENTING = "1";
  };
}
EOF

    # Replace username placeholder
    sed -i "s/REPLACE_USERNAME/$USERNAME/g" "$CONFIG_DIR/home.nix"
    
    success "Home configuration generated"
}

# Generate Hyprland configuration
generate_hyprland_config() {
    log "Generating Hyprland configuration..."
    
    cat > "$CONFIG_DIR/modules/hyprland.nix" << 'EOF'
# Hyprland Configuration for Development Workstation
# Optimized for LLM orchestration and productivity

{ config, pkgs, ... }:

{
  wayland.windowManager.hyprland = {
    enable = true;
    settings = {
      # Monitor configuration - optimized for ThinkPad P16 Gen 2
      monitor = [
        "eDP-1,3840x2400@60,0x0,1.5"    # Internal 4K display with 150% scaling
        ",preferred,auto,1"              # External monitors auto-configure
      ];

      # Input configuration  
      input = {
        kb_layout = "us";
        kb_variant = "";
        kb_model = "";
        kb_options = "";
        kb_rules = "";
        
        follow_mouse = 1;
        natural_scroll = true;
        
        touchpad = {
          natural_scroll = true;
          disable_while_typing = true;
          tap-to-click = true;
          drag_lock = false;
          middle_button_emulation = true;
        };
        
        sensitivity = 0;  # -1.0 - 1.0, 0 means no modification
      };

      # General configuration
      general = {
        gaps_in = 5;
        gaps_out = 20;
        border_size = 2;
        "col.active_border" = "rgba(33ccffee) rgba(00ff99ee) 45deg";
        "col.inactive_border" = "rgba(595959aa)";
        layout = "dwindle";
        allow_tearing = false;
      };

      # Decoration settings optimized for Intel graphics
      decoration = {
        rounding = 10;
        
        blur = {
          enabled = true;
          size = 3;
          passes = 1;
          new_optimizations = true;
          xray = false;
          vibrancy = 0.1696;
        };
        
        drop_shadow = true;
        shadow_range = 4;
        shadow_render_power = 3;
        "col.shadow" = "rgba(1a1a1aee)";
      };

      # Animations for smooth UX
      animations = {
        enabled = true;
        
        bezier = [
          "myBezier, 0.05, 0.9, 0.1, 1.05"
          "linear, 0.0, 0.0, 1.0, 1.0"
          "wind, 0.05, 0.9, 0.1, 1.05"
        ];
        
        animation = [
          "windows, 1, 7, myBezier"
          "windowsOut, 1, 7, default, popin 80%"
          "border, 1, 10, default"
          "borderangle, 1, 8, default"
          "fade, 1, 7, default"
          "workspaces, 1, 6, default"
        ];
      };

      # Dwindle layout settings
      dwindle = {
        pseudotile = true;
        preserve_split = true;
        smart_split = false;
        smart_resizing = true;
      };

      # Master layout settings (alternative)
      master = {
        new_is_master = true;
        new_on_top = false;
        mfact = 0.55;
      };

      # Gestures
      gestures = {
        workspace_swipe = true;
        workspace_swipe_fingers = 3;
        workspace_swipe_distance = 300;
        workspace_swipe_invert = true;
        workspace_swipe_min_speed_to_force = 30;
        workspace_swipe_cancel_ratio = 0.5;
        workspace_swipe_create_new = true;
      };

      # Miscellaneous settings
      misc = {
        force_default_wallpaper = 0;
        disable_hyprland_logo = true;
        disable_splash_rendering = true;
        mouse_move_enables_dpms = true;
        key_press_enables_dpms = false;
        vrr = 0;
        enable_swallow = true;
        swallow_regex = "^(Alacritty|kitty|wezterm)$";
      };

      # Window rules for development applications
      windowrulev2 = [
        # Floating windows
        "float,class:^(pavucontrol)$"
        "float,class:^(nm-applet)$"
        "float,class:^(blueman-manager)$"
        "float,class:^(file-roller)$"
        "float,class:^(org.gnome.Calculator)$"
        
        # Opacity rules  
        "opacity 0.90,class:^(Alacritty)$"
        "opacity 0.90,class:^(kitty)$"
        "opacity 0.85,class:^(wofi)$"
        
        # Workspace assignments
        "workspace 2,class:^(firefox)$"
        "workspace 3,class:^(code)$"
        "workspace 3,class:^(Code)$"
        "workspace 4,class:^(org.gnome.Nautilus)$"
        "workspace 9,class:^(discord)$"
        "workspace 9,class:^(Slack)$"
        "workspace 10,class:^(steam)$"
        
        # Size rules
        "size 800 600,class:^(pavucontrol)$"
        "size 400 300,class:^(org.gnome.Calculator)$"
        
        # Position rules
        "center,class:^(pavucontrol)$"
        "center,class:^(org.gnome.Calculator)$"
      ];

      # Keybindings optimized for development workflow
      "$mod" = "SUPER";
      bind = [
        # Application shortcuts
        "$mod, Q, exec, alacritty"
        "$mod, C, killactive,"
        "$mod, M, exit,"
        "$mod, E, exec, nautilus"
        "$mod, V, togglefloating,"
        "$mod, R, exec, wofi --show drun"
        "$mod, P, pseudo,"
        "$mod, J, togglesplit,"
        "$mod, F, fullscreen, 0"
        
        # Move focus with vim-style keys
        "$mod, h, movefocus, l"
        "$mod, l, movefocus, r"
        "$mod, k, movefocus, u"
        "$mod, j, movefocus, d"
        
        # Move focus with arrow keys
        "$mod, left, movefocus, l"
        "$mod, right, movefocus, r"
        "$mod, up, movefocus, u"
        "$mod, down, movefocus, d"
        
        # Move windows with vim-style keys
        "$mod SHIFT, h, movewindow, l"
        "$mod SHIFT, l, movewindow, r"
        "$mod SHIFT, k, movewindow, u"
        "$mod SHIFT, j, movewindow, d"
        
        # Move windows with arrow keys
        "$mod SHIFT, left, movewindow, l"
        "$mod SHIFT, right, movewindow, r"
        "$mod SHIFT, up, movewindow, u"
        "$mod SHIFT, down, movewindow, d"
        
        # Resize windows
        "$mod CTRL, h, resizeactive, -20 0"
        "$mod CTRL, l, resizeactive, 20 0"
        "$mod CTRL, k, resizeactive, 0 -20"
        "$mod CTRL, j, resizeactive, 0 20"
        
        # Workspace navigation
        "$mod, 1, workspace, 1"
        "$mod, 2, workspace, 2"
        "$mod, 3, workspace, 3"
        "$mod, 4, workspace, 4"
        "$mod, 5, workspace, 5"
        "$mod, 6, workspace, 6"
        "$mod, 7, workspace, 7"
        "$mod, 8, workspace, 8"
        "$mod, 9, workspace, 9"
        "$mod, 0, workspace, 10"
        
        # Move windows to workspaces
        "$mod SHIFT, 1, movetoworkspace, 1"
        "$mod SHIFT, 2, movetoworkspace, 2"
        "$mod SHIFT, 3, movetoworkspace, 3"
        "$mod SHIFT, 4, movetoworkspace, 4"
        "$mod SHIFT, 5, movetoworkspace, 5"
        "$mod SHIFT, 6, movetoworkspace, 6"
        "$mod SHIFT, 7, movetoworkspace, 7"
        "$mod SHIFT, 8, movetoworkspace, 8"
        "$mod SHIFT, 9, movetoworkspace, 9"
        "$mod SHIFT, 0, movetoworkspace, 10"
        
        # Move windows to workspaces silently
        "$mod CTRL SHIFT, 1, movetoworkspacesilent, 1"
        "$mod CTRL SHIFT, 2, movetoworkspacesilent, 2"
        "$mod CTRL SHIFT, 3, movetoworkspacesilent, 3"
        "$mod CTRL SHIFT, 4, movetoworkspacesilent, 4"
        "$mod CTRL SHIFT, 5, movetoworkspacesilent, 5"
        
        # Special workspaces
        "$mod, S, togglespecialworkspace, magic"
        "$mod SHIFT, S, movetoworkspace, special:magic"
        
        # Screenshot and screen recording
        "$mod SHIFT, S, exec, grim -g \"$(slurp)\" - | swappy -f -"
        "$mod, Print, exec, grim ~/Pictures/Screenshots/$(date +'%Y%m%d_%H%M%S').png"
        "$mod SHIFT, Print, exec, grim -g \"$(slurp)\" ~/Pictures/Screenshots/$(date +'%Y%m%d_%H%M%S').png"
      ];
      
      # Media and function key bindings
      bindl = [
        # Media keys
        ", XF86AudioRaiseVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+"
        ", XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-"
        ", XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
        ", XF86AudioPlay, exec, playerctl play-pause"
        ", XF86AudioPause, exec, playerctl play-pause"
        ", XF86AudioNext, exec, playerctl next"
        ", XF86AudioPrev, exec, playerctl previous"
        
        # Brightness control
        ", XF86MonBrightnessUp, exec, brightnessctl set 10%+"
        ", XF86MonBrightnessDown, exec, brightnessctl set 10%-"
      ];

      # Mouse bindings
      bindm = [
        "$mod, mouse:272, movewindow"
        "$mod, mouse:273, resizewindow"
      ];

      # Environment variables
      env = [
        "XCURSOR_SIZE,24"
        "HYPRCURSOR_SIZE,24"
      ];

      # Startup applications
      exec-once = [
        "waybar"
        "mako"
        "swww init"
        "wl-paste --type text --watch cliphist store"
        "wl-paste --type image --watch cliphist store" 
        "dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP"
      ];
    };
  };

  # Supporting applications for Hyprland
  home.packages = with pkgs; [
    # Status bar
    waybar
    
    # Notification daemon  
    mako
    
    # Application launcher
    wofi
    
    # Wallpaper manager
    swww
    
    # Screen lock
    swaylock-effects
    
    # Idle management
    swayidle
    
    # Clipboard manager
    cliphist
    
    # Color picker
    wl-color-picker
    
    # Screenshot tools
    grim
    slurp  
    swappy
    
    # Media control
    playerctl
    
    # Brightness control
    brightnessctl
    
    # Image viewer
    imv
  ];
}
EOF

    success "Hyprland configuration generated"
}

# Generate basic shell configuration
generate_shell_config() {
    log "Generating shell configuration..."
    
    cat > "$CONFIG_DIR/modules/shell.nix" << 'EOF'
# Shell Configuration - ZSH with Oh My Zsh
# Optimized for development workflows

{ config, pkgs, ... }:

{
  programs.zsh = {
    enable = true;
    enableAutosuggestions = true;
    enableSyntaxHighlighting = true;
    
    oh-my-zsh = {
      enable = true;
      theme = "robbyrussell";
      plugins = [
        "git"
        "sudo" 
        "docker"
        "kubectl"
        "python"
        "rust"
        "npm"
        "yarn"
      ];
    };
    
    shellAliases = {
      ll = "ls -l";
      la = "ls -la";
      l = "ls -CF";
      ".." = "cd ..";
      "..." = "cd ../..";
      
      # Git aliases
      g = "git";
      gs = "git status";
      ga = "git add";
      gc = "git commit";
      gp = "git push";
      gl = "git pull";
      gd = "git diff";
      
      # NixOS aliases
      nrs = "sudo nixos-rebuild switch";
      nrt = "sudo nixos-rebuild test";
      hms = "home-manager switch";
      
      # Development aliases
      v = "nvim";
      vim = "nvim";
      cat = "bat";
      ls = "exa";
      find = "fd";
      grep = "rg";
    };
    
    initExtra = ''
      # Custom prompt additions
      export PROMPT="%{$fg[cyan]%}%n@%m%{$reset_color%} %{$fg[yellow]%}%~%{$reset_color%} $(git_prompt_info)%{$fg[red]%}❯%{$reset_color%} "
      
      # Development environment variables
      export EDITOR="nvim"
      export VISUAL="nvim" 
      export BROWSER="firefox"
      export TERMINAL="alacritty"
      
      # Path additions
      export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
      
      # History settings
      export HISTSIZE=10000
      export SAVEHIST=10000
      
      # Colored man pages
      export LESS_TERMCAP_mb=$'\e[1;32m'
      export LESS_TERMCAP_md=$'\e[1;32m'
      export LESS_TERMCAP_me=$'\e[0m'
      export LESS_TERMCAP_se=$'\e[0m'
      export LESS_TERMCAP_so=$'\e[01;33m'
      export LESS_TERMCAP_ue=$'\e[0m'
      export LESS_TERMCAP_us=$'\e[1;4;31m'
    '';
  };

  # Additional shell tools
  home.packages = with pkgs; [
    bat          # Better cat
    exa          # Better ls
    fd           # Better find
    ripgrep      # Better grep
    fzf          # Fuzzy finder
    starship     # Modern prompt (alternative)
    zoxide       # Smart cd
    tldr         # Simplified man pages
  ];
}
EOF

    success "Shell configuration generated"
}

# Generate basic application configuration
generate_app_config() {
    log "Generating application configuration..."
    
    cat > "$CONFIG_DIR/modules/applications.nix" << 'EOF'
# Application Configuration
# GUI and terminal applications for development

{ config, pkgs, ... }:

{
  # Terminal emulator - Alacritty
  programs.alacritty = {
    enable = true;
    settings = {
      window = {
        opacity = 0.9;
        padding = {
          x = 10;
          y = 10;  
        };
      };
      
      font = {
        normal = {
          family = "JetBrains Mono";
          style = "Regular";
        };
        bold = {
          family = "JetBrains Mono";
          style = "Bold";
        };
        italic = {
          family = "JetBrains Mono";  
          style = "Italic";
        };
        size = 12;
      };
      
      colors = {
        primary = {
          background = "0x1e1e2e";
          foreground = "0xcdd6f4";
        };
      };
    };
  };

  # Git configuration
  programs.git = {
    enable = true;
    userName = "Your Name";  # Replace with your name
    userEmail = "your.email@example.com";  # Replace with your email
    
    extraConfig = {
      core = {
        editor = "nvim";
        autocrlf = "input";
      };
      pull.rebase = false;
      init.defaultBranch = "main";
    };
  };

  # Neovim configuration
  programs.neovim = {
    enable = true;
    viAlias = true;
    vimAlias = true;
    
    extraConfig = ''
      set number
      set relativenumber
      set expandtab
      set shiftwidth=2
      set tabstop=2
      set smartindent
      set wrap
      set smartcase
      set noswapfile
      set nobackup
      set undodir=~/.vim/undodir
      set undofile
      set incsearch
      set scrolloff=8
      set signcolumn=yes
      set colorcolumn=80
      
      " Set leader key
      let mapleader = " "
      
      " Basic keymaps
      nnoremap <leader>w :w<CR>
      nnoremap <leader>q :q<CR>
      nnoremap <leader>x :x<CR>
    '';
  };

  # Firefox configuration
  programs.firefox = {
    enable = true;
  };

  # Additional applications
  home.packages = with pkgs; [
    # Development
    vscode
    insomnia
    postman
    
    # Media
    vlc
    gimp
    
    # Utilities
    calculator
    gnome.file-roller
    
    # Communication
    discord
    telegram-desktop
    
    # Office
    libreoffice
    
    # System
    htop
    neofetch
  ];
}
EOF

    success "Application configuration generated"
}

# Generate theme configuration
generate_theme_config() {
    log "Generating theme configuration..."
    
    cat > "$CONFIG_DIR/modules/theme.nix" << 'EOF'
# Theme Configuration
# GTK, Qt, and cursor themes

{ config, pkgs, ... }:

{
  # GTK theme
  gtk = {
    enable = true;
    
    theme = {
      package = pkgs.adw-gtk3;
      name = "adw-gtk3-dark";
    };
    
    iconTheme = {
      package = pkgs.papirus-icon-theme;
      name = "Papirus-Dark";
    };
    
    font = {
      name = "Inter";
      size = 11;
    };
    
    gtk3.extraConfig = {
      Settings = ''
        gtk-application-prefer-dark-theme=1
      '';
    };
    
    gtk4.extraConfig = {
      Settings = ''
        gtk-application-prefer-dark-theme=1
      '';
    };
  };

  # Qt theme
  qt = {
    enable = true;
    platformTheme = "gtk";
    style = {
      package = pkgs.adwaita-qt;
      name = "adwaita-dark";
    };
  };

  # Cursor theme
  home.pointerCursor = {
    gtk.enable = true;
    x11.enable = true;
    package = pkgs.bibata-cursors;
    name = "Bibata-Modern-Classic";
    size = 24;
  };
}
EOF

    success "Theme configuration generated"
}

# Generate development environment configuration
generate_dev_config() {
    log "Generating development environment configuration..."
    
    cat > "$CONFIG_DIR/modules/development.nix" << 'EOF'
# Development Environment Configuration
# Language-specific tools and environments

{ config, pkgs, ... }:

{
  home.packages = with pkgs; [
    # Version control
    git
    git-lfs
    gh  # GitHub CLI
    
    # Build tools
    gnumake
    cmake
    ninja
    pkg-config
    
    # Languages and runtimes
    python3
    nodejs
    rustup
    go
    java
    
    # Development tools
    docker
    docker-compose
    kubectl
    terraform
    
    # Databases
    sqlite
    postgresql
    
    # Network tools
    curl
    wget
    httpie
    
    # JSON/YAML tools
    jq
    yq
    
    # Text processing
    ripgrep
    fd
    bat
    
    # System tools
    htop
    tree
    lsof
    
    # Archive tools
    unzip
    zip
    p7zip
  ];

  # Development shell environments will be managed per-project
  # using nix-shell or flakes
}
EOF

    success "Development configuration generated"
}

# Apply Home Manager configuration
apply_home_manager() {
    log "Applying Home Manager configuration..."
    
    cd "$CONFIG_DIR"
    
    # Initialize git repository for configuration management
    if [[ ! -d .git ]]; then
        git init
        git add .
        git commit -m "Initial Home Manager configuration"
    fi
    
    # Apply the configuration
    home-manager switch
    
    success "Home Manager configuration applied"
}

# Post-setup configuration
post_setup() {
    log "Performing post-setup tasks..."
    
    # Set up desktop wallpaper directory
    if [[ ! -f "$HOME/Pictures/Wallpapers/default.jpg" ]]; then
        # Create a simple default wallpaper
        convert -size 3840x2400 xc:'#2d3748' "$HOME/Pictures/Wallpapers/default.jpg" 2>/dev/null || true
    fi
    
    # Create some useful desktop directories
    mkdir -p "$HOME/Desktop"
    mkdir -p "$HOME/Documents/Projects"
    mkdir -p "$HOME/.local/share/fonts"
    
    success "Post-setup tasks completed"
}

# Main setup process
main() {
    log "Starting Home Manager setup for LLM-orchestrated workstation..."
    
    check_environment
    backup_existing_configs
    install_home_manager
    create_directory_structure
    generate_home_config
    generate_hyprland_config
    generate_shell_config
    generate_app_config
    generate_theme_config
    generate_dev_config
    apply_home_manager
    post_setup
    
    success "Home Manager setup completed successfully!"
    echo
    echo -e "${GREEN}=== Next Steps ===${NC}"
    echo "1. Log out and log back in to load new environment"
    echo "2. Configure git with your actual name and email in ~/.config/home-manager/modules/applications.nix"
    echo "3. Run 'home-manager switch' after making configuration changes"
    echo "4. Install LLM orchestration tools (Claude Code, etc.)"
    echo
    echo -e "${BLUE}Configuration location:${NC} $CONFIG_DIR"
    echo -e "${BLUE}Backup location:${NC} $BACKUP_DIR"
}

# Run main function
main "$@"