#!/usr/bin/env bash
# NixOS Installation Script for ThinkPad P16 Gen 2
# Optimized for LLM-orchestrated workstation setup
# Author: Generated by Claude Code synthesis
# Date: 2025-08-12

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
    exit 1
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Verify we're running on the NixOS installer
check_environment() {
    log "Checking installation environment..."
    
    if [[ ! -f /etc/NIXOS ]]; then
        error "This script must be run from the NixOS installation environment"
    fi
    
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root"
    fi
    
    success "Environment check passed"
}

# Hardware detection and validation
detect_hardware() {
    log "Detecting and validating hardware..."
    
    # Check for ThinkPad P16 Gen 2 characteristics
    local cpu_model=$(cat /proc/cpuinfo | grep "model name" | head -1 | cut -d: -f2 | xargs)
    local total_memory=$(free -g | grep "Mem:" | awk '{print $2}')
    
    log "Detected CPU: $cpu_model"
    log "Detected Memory: ${total_memory}GB"
    
    # Validate expected hardware
    if [[ "$cpu_model" != *"i9-13980HX"* ]]; then
        warn "Expected Intel i9-13980HX processor, detected: $cpu_model"
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    if [[ $total_memory -lt 180 ]]; then
        warn "Expected ~192GB RAM, detected: ${total_memory}GB"
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    # Check for NVMe storage
    if ! lsblk | grep -q nvme; then
        error "No NVMe storage detected. Expected 4TB NVMe SSD."
    fi
    
    success "Hardware validation completed"
}

# Network connectivity check
check_network() {
    log "Checking network connectivity..."
    
    if ! ping -c 1 cache.nixos.org &> /dev/null; then
        error "Cannot reach NixOS cache. Please configure network connection first."
    fi
    
    success "Network connectivity confirmed"
}

# Disk partitioning for optimal performance
partition_disk() {
    log "Setting up disk partitioning..."
    
    # Detect primary NVMe device
    local nvme_device=$(lsblk -ndo NAME,TYPE | grep disk | grep nvme | head -1 | cut -d' ' -f1)
    local disk_path="/dev/${nvme_device}"
    
    log "Target disk: $disk_path"
    
    # Confirm destructive operation
    echo -e "${RED}WARNING: This will DESTROY all data on $disk_path${NC}"
    read -p "Are you absolutely sure? Type 'YES' to continue: " confirmation
    if [[ "$confirmation" != "YES" ]]; then
        error "Installation cancelled by user"
    fi
    
    # Unmount any existing mounts
    umount -R /mnt 2>/dev/null || true
    
    # Wipe existing partition table
    log "Wiping existing partition table..."
    wipefs -a "$disk_path"
    sgdisk -Z "$disk_path"
    
    # Create new GPT partition table
    log "Creating new partition layout..."
    
    # Partition scheme optimized for NixOS + LLM workflows:
    # 1. EFI System Partition (1GB for multiple kernels)
    # 2. Boot partition (2GB for /boot with multiple generations)  
    # 3. Root partition (remainder - Btrfs with subvolumes)
    
    sgdisk -n 1:0:+1G -t 1:ef00 -c 1:"EFI System" "$disk_path"
    sgdisk -n 2:0:+2G -t 2:8300 -c 2:"Boot" "$disk_path"
    sgdisk -n 3:0:0 -t 3:8300 -c 3:"Root" "$disk_path"
    
    # Inform kernel of partition changes
    partprobe "$disk_path"
    sleep 2
    
    success "Disk partitioning completed"
    
    # Store partition info for later use
    export EFI_PARTITION="${disk_path}p1"
    export BOOT_PARTITION="${disk_path}p2" 
    export ROOT_PARTITION="${disk_path}p3"
}

# Filesystem creation optimized for performance
create_filesystems() {
    log "Creating optimized filesystems..."
    
    # Format EFI partition
    log "Formatting EFI partition..."
    mkfs.fat -F 32 -n "EFI" "$EFI_PARTITION"
    
    # Format boot partition
    log "Formatting boot partition..."
    mkfs.ext4 -L "BOOT" "$BOOT_PARTITION"
    
    # Format root partition with Btrfs
    log "Formatting root partition with Btrfs..."
    mkfs.btrfs -f -L "NIXOS_ROOT" "$ROOT_PARTITION"
    
    # Mount root and create subvolumes
    log "Creating Btrfs subvolumes..."
    mount "$ROOT_PARTITION" /mnt
    
    # Create subvolume layout optimized for NixOS
    btrfs subvolume create /mnt/@             # Root subvolume
    btrfs subvolume create /mnt/@home         # Home directory subvolume
    btrfs subvolume create /mnt/@nix          # Nix store subvolume (for snapshots)
    btrfs subvolume create /mnt/@log          # Log files subvolume
    btrfs subvolume create /mnt/@cache        # Cache subvolume
    btrfs subvolume create /mnt/@snapshots    # Snapshot storage
    
    umount /mnt
    
    success "Filesystems created successfully"
}

# Mount filesystems with optimal options
mount_filesystems() {
    log "Mounting filesystems with performance optimizations..."
    
    # Mount root subvolume with performance options
    mount -o compress=zstd:3,noatime,subvol=@ "$ROOT_PARTITION" /mnt
    
    # Create mount points
    mkdir -p /mnt/{boot,home,nix,var/log,var/cache,.snapshots}
    
    # Mount EFI partition
    mount "$EFI_PARTITION" /mnt/boot
    
    # Mount other subvolumes
    mount -o compress=zstd:3,noatime,subvol=@home "$ROOT_PARTITION" /mnt/home
    mount -o compress=zstd:3,noatime,subvol=@nix "$ROOT_PARTITION" /mnt/nix  
    mount -o compress=zstd:3,noatime,subvol=@log "$ROOT_PARTITION" /mnt/var/log
    mount -o compress=zstd:3,noatime,subvol=@cache "$ROOT_PARTITION" /mnt/var/cache
    mount -o compress=zstd:3,noatime,subvol=@snapshots "$ROOT_PARTITION" /mnt/.snapshots
    
    success "Filesystem mounting completed"
}

# Generate hardware configuration
generate_hardware_config() {
    log "Generating NixOS hardware configuration..."
    
    nixos-generate-config --root /mnt
    
    # Enhance hardware configuration for ThinkPad P16 Gen 2
    cat >> /mnt/etc/nixos/hardware-configuration.nix << 'EOF'

  # ThinkPad P16 Gen 2 specific optimizations
  boot.kernelParams = [
    "intel_iommu=on"           # Enable Intel IOMMU
    "i915.enable_guc=3"        # Enable GuC and HuC for Intel graphics
    "processor.max_cstate=1"   # Optimize for performance over power saving
    "intel_idle.max_cstate=1"  # Reduce CPU idle latency
    "nvme_core.default_ps_max_latency_us=0"  # Disable NVMe power saving
  ];

  # Enable Intel graphics
  hardware.opengl = {
    enable = true;
    driSupport = true;
    driSupport32Bit = true;
  };

  # Power management for high-performance workstation
  powerManagement.cpuFreqGovernor = "performance";
  
  # Enable firmware updates
  hardware.enableRedistributableFirmware = true;
  
  # Enable Bluetooth
  hardware.bluetooth.enable = true;

EOF
    
    success "Hardware configuration enhanced"
}

# Create base NixOS configuration
create_base_config() {
    log "Creating base NixOS configuration..."
    
    cat > /mnt/etc/nixos/configuration.nix << 'EOF'
# NixOS Configuration for LLM-Orchestrated ThinkPad P16 Gen 2
# Generated: 2025-08-12
# Target: High-performance development workstation

{ config, pkgs, ... }:

{
  imports = [
    ./hardware-configuration.nix
  ];

  # Boot configuration
  boot = {
    loader = {
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
      timeout = 5;
    };
    
    # Use latest kernel for best hardware support
    kernelPackages = pkgs.linuxPackages_latest;
    
    # Enable Btrfs support
    supportedFilesystems = [ "btrfs" ];
  };

  # Networking
  networking = {
    hostName = "nixos-thinkpad-p16";
    networkmanager.enable = true;
    firewall.enable = true;
  };

  # Internationalization
  time.timeZone = "America/New_York";
  i18n.defaultLocale = "en_US.UTF-8";
  
  console = {
    font = "Lat2-Terminus16";
    keyMap = "us";
  };

  # User account (replace 'user' with your preferred username)
  users.users.user = {
    isNormalUser = true;
    description = "Main User";
    extraGroups = [ "networkmanager" "wheel" "docker" "audio" "video" ];
    shell = pkgs.bash;
  };

  # Enable sudo for wheel group
  security.sudo.wheelNeedsPassword = false;

  # Basic system packages
  environment.systemPackages = with pkgs; [
    vim
    wget
    curl
    git
    htop
    tree
    unzip
    firefox
  ];

  # Enable Hyprland (will be configured via Home Manager)
  programs.hyprland = {
    enable = true;
    xwayland.enable = true;
  };

  # Audio with PipeWire
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    jack.enable = true;
  };

  # Enable Docker for development
  virtualisation.docker.enable = true;

  # Enable SSH for remote management
  services.openssh = {
    enable = true;
    settings = {
      PasswordAuthentication = false;
      KbdInteractiveAuthentication = false;
    };
  };

  # Nix configuration
  nix = {
    settings = {
      experimental-features = [ "nix-command" "flakes" ];
      auto-optimise-store = true;
    };
    gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 30d";
    };
  };

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # NixOS version
  system.stateVersion = "24.11";
}
EOF
    
    success "Base configuration created"
}

# Install NixOS
install_nixos() {
    log "Installing NixOS..."
    
    # Run the installation
    nixos-install --root /mnt --no-root-passwd
    
    success "NixOS installation completed"
}

# Post-installation setup
post_install_setup() {
    log "Performing post-installation setup..."
    
    # Create directory for LLM configuration management
    mkdir -p /mnt/home/user/.config
    mkdir -p /mnt/etc/nixos/modules
    
    # Initialize git repository for configuration management
    cd /mnt/etc/nixos
    git init
    git add .
    git commit -m "Initial NixOS configuration"
    
    # Set permissions
    chown -R 1000:100 /mnt/home/user/.config
    
    success "Post-installation setup completed"
}

# Main installation process
main() {
    log "Starting NixOS installation for ThinkPad P16 Gen 2..."
    log "This installation is optimized for LLM orchestration workflows"
    
    check_environment
    detect_hardware
    check_network
    partition_disk
    create_filesystems
    mount_filesystems
    generate_hardware_config
    create_base_config
    install_nixos
    post_install_setup
    
    success "Installation completed successfully!"
    echo
    echo -e "${GREEN}=== Next Steps ===${NC}"
    echo "1. Reboot into the new system: reboot"
    echo "2. Log in as your user account"
    echo "3. Run the Home Manager setup script"
    echo "4. Install and configure LLM orchestration tools"
    echo
    echo -e "${YELLOW}Note: Replace 'user' in configuration.nix with your preferred username${NC}"
}

# Run main function
main "$@"